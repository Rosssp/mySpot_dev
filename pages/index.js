import styles from "./main.module.scss";
import React from "react";
import Image from "next/image";
import images from "constants/images";
import { useRouter } from "next/router";
import useWindowSize from "Hooks/useWindowSize";
import Head from "next/head";
import { motion } from "framer-motion";
import useMediaQuery from "../Hooks/useMediaQuery";

export default function HomePage() {
    // console.log("credentials", data);
    const mob768 = useMediaQuery(768);
    const router = useRouter();
    const handleClick = (e) => {
        e.preventDefault();
        router.push("/map");
    };

    const leftWrapper = React.useRef(null);
    const rightWrapper = React.useRef(null);

    const [leftX, setLeftXPos] = React.useState(0);
    const [leftY, setLeftYPos] = React.useState(0);

    const [rightX, setRightYPos] = React.useState(0);
    const [rightY, setRightXPos] = React.useState(0);

    const windowSize = useWindowSize();
    let cX = windowSize.width / 2,
        cY = windowSize.height / 2;

    React.useEffect(() => {
        const handleMouseMoveLeft = (e) => {
            const rect = leftWrapper.current.getBoundingClientRect();
            setLeftXPos(e.clientX - rect.left - cX);
            setLeftYPos(e.clientY - rect.top - cY);
        };
        const handleMouseMoveRight = (e) => {
            const rect = rightWrapper.current.getBoundingClientRect();
            setRightYPos(e.clientX - rect.left - cX);
            setRightXPos(e.clientY - rect.top - cY);
        };

        const mouseLeaveLeft = () => {
            setLeftXPos(0);
            setLeftYPos(0);
        };
        const mouseLeaveRight = () => {
            setRightYPos(0);
            setRightXPos(0);
        };

        leftWrapper.current.addEventListener("mousemove", handleMouseMoveLeft);
        leftWrapper.current.addEventListener("mouseleave", mouseLeaveLeft);
        rightWrapper.current.addEventListener("mousemove", handleMouseMoveRight);
        rightWrapper.current.addEventListener("mouseleave", mouseLeaveRight);
        // return () => {
        //     if (leftWrapper.current) {
        //         leftWrapper.current.removeEventListener("mousemove", handleMouseMoveLeft);
        //         leftWrapper.current.removeEventListener("mouseleave", mouseLeaveLeft);
        //     }
        //     if (rightWrapper.current) {
        //         rightWrapper.current.removeEventListener("mousemove", handleMouseMoveRight);
        //         rightWrapper.current.removeEventListener("mouseleave", mouseLeaveRight);
        //     }
        // };
    }, [leftX, leftY, rightX, rightY]);

    const moveLeftBackX = -leftX / 80 + "px";
    const moveLeftBackY = -leftY / 80 + "px";
    const moveLeftCenterX = -leftX / 30 + "px";
    const moveLeftCenterY = -leftY / 30 + "px";

    const moveRightBackX = -rightX / 80 + "px";
    const moveRightBackY = -rightY / 80 + "px";
    const moveRightCenterX = -rightX / 30 + "px";
    const moveRightCenterY = -rightY / 30 + "px";

    return (
        <motion.div className={styles.main_wrapper}>
            <Head>
                <title>MY SPOT</title>
                <meta name="description" content="Generated by create next app" />
                <meta property="og:title" content="MY SPOT" key="title" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" type="image/png" sizes="144x144" href="/icon.svg" />
            </Head>
            <div className={styles.wrapper}>
                {mob768 ? (
                    <>
                        <div className={styles.background}></div>
                        <div className={styles.main} onClick={handleClick}>
                            <Image src={images.logo} alt="Logo" />
                        </div>
                    </>
                ) : (
                    <>
                        <div className={styles.main_wrapper_left} ref={leftWrapper} onClick={handleClick}>
                            <div className={styles.background}>
                                <div className={styles.ponos}>
                                    <Image
                                        style={{
                                            transform: `translate(${moveLeftBackX}, ${moveLeftBackY})`,
                                        }}
                                        src={images.railingss}
                                    />
                                </div>
                            </div>
                            <div className={styles.main_content}>
                                <Image
                                    src={images.logoMain}
                                    alt="Logo"
                                    style={{
                                        transform: `translate(${moveLeftCenterX}, ${moveLeftCenterY})`,
                                    }}
                                />
                            </div>
                        </div>

                        <div className={styles.middleBorder}></div>

                        <div className={styles.main_wrapper_right} ref={rightWrapper} onClick={handleClick}>
                            <div className={styles.main_content}>
                                <Image
                                    src={images.logoMainTricks}
                                    alt="Logo"
                                    style={{
                                        transform: `translate(${moveRightCenterX}, ${moveRightCenterY})`,
                                    }}
                                />
                            </div>
                        </div>
                    </>
                )}
            </div>
        </motion.div>
    );
}

// export async function getServerSideProps() {
//     const res = httpCommon.get("/api/profile.json");
//     const data = await res?.data;
//     return { props: { data } };
// }
